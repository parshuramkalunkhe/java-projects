package collections;

public class Collections {
	public void collections() {
		System.out.println("Group of Object Present inside an object.");
		System.out.println();
		System.out.println("* framework");
		System.out.println("  1. framework is a structure or hierachy.");
		System.out.println("  2. It consists of many inbuilt classes and interfaces.");
		System.out.println();
		System.out.println("** Collection framework");
		System.out.println("\t set of classes and interfaces which provided a mechanism to perform CRUD operation, searching operations, sorting operations on group of objects.");
		System.out.println();
		System.out.println("** Collection hierarchy");
		System.out.println("Iterable --> interface");
		System.out.println("Collection --> interface which implements Iterable interface.");
		System.out.println("--------------------------------------------------------------");
		System.out.println("List --> interface which implements Collection interface.");
		System.out.println("ArrayList --> class which implements List interface.");
		System.out.println("LinkedList --> class which implements List interface.");
		System.out.println("Vector --> class which implements List interface.");
		System.out.println("Stack --> class which extends Vector class.");
		System.out.println("--------------------------------------------------------------");
		System.out.println("Set --> interface which implements Collection interface.");
		System.out.println("HashSet --> class which implements Set interface.");
		System.out.println("TreeSet --> class which implements Set interface.");
		System.out.println("LinkedHashSet --> class which implements Set interface.");
		System.out.println("--------------------------------------------------------------");
		System.out.println("Queue --> interface which implements Collection interface.");
		System.out.println("PriorityQueue --> class which implements Queue interface.");
		System.out.println("LinkedList --> class which implements Queue interface.");
		System.out.println();
		System.out.println("* NOTE :");
		System.out.println("\t All the classes and interfaces present inside collection hierarchy are defined in java.util package, hence it mandatory to import.");
		System.out.println();
		System.out.println("* Inbuilt non-static methods of List.");
		System.out.println("  1. To add an object.");
		System.out.println("\t - add(object)");
		System.out.println("\t - addAll(collection)");
		System.out.println("\t - add(int index, object)");
		System.out.println("\t - addAll(int index, collection)");
		System.out.println();
		System.out.println("  2. To remove objects");
		System.out.println("\t - remove(object)");
		System.out.println("\t - remove(int index)");
		System.out.println("\t - removeAll(collection)");
		System.out.println("\t - clear()");
		System.out.println();
		System.out.println("  3. To search objects");
		System.out.println("\t - contains(object)");
		System.out.println("\t - containsAll(collection)");
		System.out.println();
		System.out.println("  4. To access objects");
		System.out.println("\t - get(int index)");
		System.out.println("\t - iterator()");
		System.out.println("\t - listIterator()");
		System.out.println("\t - for each loop");
		System.out.println();
		System.out.println("  5. other methods");
		System.out.println("\t - size()");
		System.out.println();
		System.out.println("* Q. Difference between Array & Collections.");
		System.out.println("* Arrays");
		System.out.println(" 1. Arrays size is fixed");
		System.out.println(" 2. Array allows only same type of elements (Object) Homogeneous.");
		System.out.println(" 3. Array don't have any inbuilt CRUD, searching, sorting, functionality.");
		System.out.println(" 4. To find number of objects we used variable called as length");
		System.out.println();
		System.out.println("* Collections");
		System.out.println(" 1. Collections size is not fixed.");
		System.out.println(" 2. Collections allowed same as well as different type of elements (Objects) (Heterogeneous)");
		System.out.println(" 3. Collections does have inbuilt CRUD, Searching, Sorting fucntionality.");
		System.out.println(" 4. To find number of objects present inside collection we used method called size().");
		System.out.println();
		System.out.println("* Q. How to access objects of list one by one?");
		System.out.println("  1. by using get(int index)");
		System.out.println("  2. for each loop");
		System.out.println("  3. iterator();");
		System.out.println("  4. listIterator()");
		System.out.println();
		System.out.println("* Q. Difference between for loop and for-each loop?");
		System.out.println("* for loop");
		System.out.println("  1. The for loop is control structure for specifying iteration that allows code to be repeatedly execute.");
		System.out.println("  2. A for loop can be used to retrieve a paritcular set of elements.");
		System.out.println("  3. The for loop is harder to read and write than the for - each loop.");
		System.out.println("  4. The for loop is used as a general purpose loop.");
		System.out.println("  5. The for loop has three segments that is declaration, condition and updation (increment/decrement)");
		System.out.println();
		System.out.println("* for each loop");
		System.out.println("  1. The for each loop is control structure for traversing items in an array or a collection.");
		System.out.println("  2. The for each loop cannot be used to retrieve a particular set of elements.");
		System.out.println("  3. The for each loop is easier to read adn write than the for loop.");
		System.out.println("  4. The for each loop is used for arrays and collections.");
		System.out.println("  5. The for each loop has two segements that is declaration and followed by the name of an array or collection");
		System.out.println();
		System.out.println("* Q Difference between Iterator and ListIterator?");
		System.out.println("* Iterator");
		System.out.println("  1. It can traverse elements present in collection only in the forward direction.");
		System.out.println("  2. Helps to traverse Map, List and Set.");
		System.out.println("  3. Certain methods of Iterator are next(), and hasNext()");
		System.out.println();
		System.out.println("* ListIterator");
		System.out.println("  1. It can traverse elements present in colleciton both in forward and backward direction.");
		System.out.println("  2. It can only traverse List.");
		System.out.println("  3. Certain methods of ListIterator are next(), previous(), hasNext() and hasPrevious().");
		System.out.println();
		System.out.println("* Q How to sort list?");
		System.out.println("\t By using sort(list) method and reverse(list) method. Both are static methods of collections class.");
		System.out.println();
		System.out.println("* Q. Difference between collection and collections?");
		System.out.println("* collection");
		System.out.println("  1. collection is interface.");
		System.out.println("  2. collection interface has three sub interfaces");
		System.out.println("\t a) List");
		System.out.println("\t b) Set");
		System.out.println("\t c) Queue");
		System.out.println();
		System.out.println("* collections");
		System.out.println("  1. collection is class");
		System.out.println("  2. collection class has two static methods that are as follow as.");
		System.out.println("\t a) sort(list)");
		System.out.println("\t b) reverse(list)");
		System.out.println();
		System.out.println("* Q How to call sort(list) and reverse(list) methods");
		System.out.println("\t By using ClassName --> Collection.sor(list), Collection.reverse(list)");
		System.out.println();
		System.out.println("* sorting to arraylist");
		System.out.println("  1. In sorting null is not allowed.");
		System.out.println("  2. Heterogeneous is not allowed.");
		System.out.println();
		System.out.println("* Q. Difference between ArrayList and Vector?");
		System.out.println("* ArrayList");
		System.out.println("  1. ArrayList is present from/ since JDK 1.2.");
		System.out.println("  2. ArrayList is legacy class.");
		System.out.println("  3. Initial capacity is 10.");
		System.out.println("  4. ArrayList is faster.");
		System.out.println("  5. Incremental Capacity = IC");
		System.out.println("  6. Current Capacity = CC");
		System.out.println("  7. Formula for ArrayList : IC = (CC * 3/2) + 1");
		System.out.println();
		System.out.println("* Vector");
		System.out.println("  1. Vector is present from / since JDK 1.0");
		System.out.println("  2. Vector is a legacy class.");
		System.out.println("  3. Initial Capacity is 10.");
		System.out.println("  4. Vector is slower.");
		System.out.println("  5. Incremental Capacity = IC");
		System.out.println("  6. Current Capacity = CC");
		System.out.println("  7. Formula for Vector = IC = CC * 2");
		System.out.println();
		System.out.println("* Q. Difference ArrayList and LinkedList?");
		System.out.println("* ArrayList");
		System.out.println("  1. ArrayList follows array data structure.");
		System.out.println("  2. Object will be stored in the format of continuous block of memory.");
		System.out.println("  3. ArrayList has Initial and Incremental capacities that's why it is also known as growable type.");
		System.out.println("  4. ArrayList implement List interface.");
		System.out.println("  5. ArrayList involves shifting opertions.");
		System.out.println("  6. ArrayList is not good for adding & removing objects.");
		System.out.println("  7. ArrayList is best for searching & accessing objects.");
		System.out.println();
		System.out.println("* LinkedList");
		System.out.println("  1. LinkedList follows doubly linked data structure.");
		System.out.println("  2. Object will be stored in the format of node.");
		System.out.println("  3. LinkedList does not have Initial as well as Incremental Capacity.");
		System.out.println("  4. LinkedList implements List as well as Queue.");
		System.out.println("  5. LinkedList does not involves shifting operations");
		System.out.println("  6. LinkedList is good for adding & removing objects.");
		System.out.println("  7. LinkedList is not best for sending & accessing objects.");
		System.out.println();
		System.out.println("* Q. Difference between List & Set.");
		System.out.println("* List");
		System.out.println("  1. Duplicate objects are allowed");
		System.out.println("  2. List maintains insertion order [FIFO/LILO]");
		System.out.println("  3. Random access is allowed.");
		System.out.println("  4. List maintains index.");
		System.out.println("  5. Any number of null objects are allowed.");
		System.out.println("  6. In list we can add and remove object using index.");
		System.out.println("  7. In List there are 4 ways to access objects.");
		System.out.println("\t a) get(int index)");
		System.out.println("\t b) iterator()");
		System.out.println("\t c) listIterator()");
		System.out.println("\t d) for each loop");
		System.out.println();
		System.out.println("* Set");
		System.out.println("  1. Duplicate objects are allowed.");
		System.out.println("  2. Set does not maintains insertion order [FIFO/LILO]");
		System.out.println("  3. Random access is not allowed.");
		System.out.println("  4. Set does not maintains index.");
		System.out.println("  5. Only one null object is allowed");
		System.out.println("  6. In set we can add and remove objects by using object not by using index.");
		System.out.println("  7. In set there are 2 ways to access objects");
		System.out.println("\t a) iterator()");
		System.out.println("\t b) for-each loop");
		System.out.println();
		System.out.println("* Q How to convert Map into Set/Collection?");
		System.out.println("\t using entrySet()");
		
	}
}