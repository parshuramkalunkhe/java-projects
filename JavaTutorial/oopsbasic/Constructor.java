package oopsbasic;

public class Constructor {
	public void constructor() {
		System.out.println("Constructor is a special non-static member because 1. constructor name must be the same as classname. 2. constructor is similar to method but constructor doesn't have any return type.");
		System.out.println();
		System.out.println("* Q. Why do we need constructor?");
		System.out.println("  A: To store all non-static member inside object.");
		System.out.println();
		System.out.println("* Difference between method & constructor?");
		System.out.println("* Method");
		System.out.println("\t1. Method can have many names.");
		System.out.println("\t2. Method have return type.");
		System.out.println("\t3. Method can be static or non-static.");
		System.out.println("\t4. Method can be called directly, classname and object reference.");
		System.out.println("\t5. Method used to execute some statement for specific task.");
		System.out.println("\t6. Method can be called by programmer explicitly.");
		System.out.println();
		System.out.println("* Constructor");
		System.out.println("\t1. Constructor name must be as same as class name.");
		System.out.println("\t2. Constructor doesn't have any return type.");
		System.out.println("\t3. Constructor cannot be static it only be non-static.");
		System.out.println("\t4. Constructor used to store non-static members.");
		System.out.println("\t5. Constructor can be called by using new keyword.");
		System.out.println("\t6. constructor can be called by compiler implicitly.");
		System.out.println();
		System.out.println("* Types Of Constructor.");
		System.out.println("\t1. No Argument Constructor.");
		System.out.println("\t2. Parameterized Constructor.");
		System.out.println();
		System.out.println("1. No Argument Constructor.");
		System.out.println("\t Constructor without any arguments is known as No Arguments Constructor.");
		System.out.println();
		System.out.println("2. Argument Constructor.");
		System.out.println("\t Constructor with argument is known as parameterized constructor.");
		System.out.println();
		System.out.println("* NOTE :");
		System.out.println("\t If the programmer doesn't created any constructor then by default compile will created no argument constructor during compile time known as default constructor.");
		System.out.println("* Q. When does constructor gets executed?");
		System.out.println("  A: Only when we create object.");
		System.out.println();
		System.out.println("* Every constructor by default will have four things.");
		System.out.println("  1. PLI - Pre Loading Instruction");
		System.out.println("  2. IIB - Instance Initializer Block");
		System.out.println("  3. UWS - User Written Statements.");
		System.out.println();
		System.out.println("* Constructor Overloading.");
		System.out.println("\t Class is having more than one constructor with same name but different formal argument either differeing in lengths or data type is known as constructor overloading.");
		System.out.println();
		System.out.println("* Q. Why do we need parameterized constructor?");
		System.out.println("  A: To initialize non static variable during object creation.");
		System.out.println();
		System.out.println("* Constructor chaining.");
		System.out.println("\t One constructor calling another constructor is known as constructor chaining.");
		System.out.println();
		System.out.println("* Q. How to achieve constructor chaining?");
		System.out.println("  A: By using this(); this calling statement. or By using super(); super calling statement.");
		System.out.println();
		System.out.println("* this();");
		System.out.println("\t1. It is used to called constructor of same class.");
		System.out.println("\t2. It is a constructor calling statement.");
		System.out.println("\t3. It is used to achieve constructor chaining.");
		System.out.println();
		System.out.println("* Rules to use this();");
		System.out.println("\t1. this(); must be the first statement.");
		System.out.println("\t2. One constructor can have only this(); calling statement.");
		System.out.println("\t3. If we have n number of constructor then we can have only n -1 this(); statement.");
		System.out.println("\t4. Constructor recursion is not possible.");
		System.out.println();
		System.out.println("* Q. Difference between this & this();");
		System.out.println("* this");
		System.out.println("\t1. It is a keyword.");
		System.out.println("\t2. It is also known as reference variable.");
		System.out.println("\t3. It will have address of an current object.");
		System.out.println("\t4. To access non static members.");
		System.out.println();
		System.out.println("* this();");
		System.out.println("\t1. It is a constructor calling statement.");
		System.out.println("\t2. It is also known as this calling statement");
		System.out.println("\t3. To called another constructor.");
		System.out.println("\t4. To achieve constructor chaining.");
		System.out.println();
		System.out.println("* Q. Can we create a class without main method main()?");
		System.out.println("  A: Yes we can compile but we cannot execute.");
		System.out.println();
		System.out.println("* Q. What is driver class?");
		System.out.println("  A: The class which has main() method.");
		System.out.println();
		System.out.println("* Q. Can we create multiple class in single java file?");
		System.out.println("  A: Yes it is possible.");
		System.out.println();
		System.out.println("* Q. Can we create object of one class inside another class?");
		System.out.println("  A: Yes we can");
		System.out.println();
		System.out.println("* NOTE :");
		System.out.println("\t Global members of one class on be used inside another class.");
	}
}
